/**
  You need to create an express HTTP server in Node.js which will handle the logic of a todo list app.
  - Don't use any database, just store all the data in an array to store the todo list data (in-memory)
  - Hard todo: Try to save responses in files, so that even if u exit the app and run it again, the data remains (similar to databases)

  Each todo has a title and a description. The title is a string and the description is a string.
  Each todo should also get an unique autogenerated id every time it is created
  The expected API endpoints are defined below,
  1.GET /todos - Retrieve all todo items
    Description: Returns a list of all todo items.
    Response: 200 OK with an array of todo items in JSON format.
    Example: GET http://localhost:3000/todos
    
  2.GET /todos/:id - Retrieve a specific todo item by ID
    Description: Returns a specific todo item identified by its ID.
    Response: 200 OK with the todo item in JSON format if found, or 404 Not Found if not found.
    Example: GET http://localhost:3000/todos/123
    
  3. POST /todos - Create a new todo item
    Description: Creates a new todo item.
    Request Body: JSON object representing the todo item.
    Response: 201 Created with the ID of the created todo item in JSON format. eg: {id: 1}
    Example: POST http://localhost:3000/todos
    Request Body: { "title": "Buy groceries", "completed": false, description: "I should buy groceries" }
    
  4. PUT /todos/:id - Update an existing todo item by ID
    Description: Updates an existing todo item identified by its ID.
    Request Body: JSON object representing the updated todo item.
    Response: 200 OK if the todo item was found and updated, or 404 Not Found if not found.
    Example: PUT http://localhost:3000/todos/123
    Request Body: { "title": "Buy groceries", "completed": true }
    
  5. DELETE /todos/:id - Delete a todo item by ID
    Description: Deletes a todo item identified by its ID.
    Response: 200 OK if the todo item was found and deleted, or 404 Not Found if not found.
    Example: DELETE http://localhost:3000/todos/123

    - For any other route not defined in the server return 404

  Testing the server - run `npm run test-todoServer` command in terminal
 */
const fs = require('fs');
const path = require('path')
const express = require('express');
const bodyParser = require('body-parser');
const { error } = require('console');
const { date } = require('zod');
const app = express();
  
app.use(bodyParser.json());
//app.use(express.json());
function findIndex(arr, id){
  for (i=0; i < arr.length; i++){
    if (arr[i].id === id){
      console.log(i)
      return i;
    }
  }
  return -1;
}

const todos = path.join(__dirname, './todos.json')
console.log(todos)
app.get('/todos', (req,res) => {
  fs.readFile(todos,'utf-8', (err, data) => {
    let todo_data = JSON.parse(data)
    //console.log(todo_data.length)
    res.json(todo_data);
  })
})

app.get('/todos/:id', (req, res) => {
  let todo_id = parseInt(req.params.id);

  fs.readFile(todos, 'utf-8', (err,data) =>{
    //console.log(data);
    const todo_data = JSON.parse(data);
    //console.log(todo_data);
    const todoIndex = findIndex(todo_data, todo_id)
    if (todoIndex === -1) {
      return res.status(404).json({ error: 'Todo not found' });
    } else {
    res.json(todo_data[todoIndex]);
    }
  })
});

app.post('/todos/', (req,res)=> {

  fs.readFile(todos, 'utf-8', (err, data)=> {
    const newTodo = {
      id: req.body.id,
      title: req.body.title,
      description: req.body.description
    }
    const todo_data = JSON.parse(data);
    todo_data.push(newTodo);
  fs.writeFile(todos, JSON.stringify(todo_data), 'utf-8', (err)=> {
    if (err) throw (error)
      res.status(200).json(todo_data)
  });
});
});

// In this put I update this inside app.put() code i have written which is not totally correct
// these edits should be made in body , POSTMAN for sending requests and called as req.body.id 
// this makes it problematic as I need to make changes in app.post

app.put('/todos/:id', (req, res) => {
  let id = parseInt(req.params.id);

  fs.readFile(todos, 'utf-8', (err, data) => {
    if (err) {
      console.error('Error reading file:', err);
      return res.status(500).json({ message: 'Server error' });
    }

    let todo_data = JSON.parse(data);
    let todoItem = todo_data.find((t) => t.id == id); // OOR (t) => {return t.id == id}

    if (todoItem) {
      // Update the specific field(s)
      todoItem.Description = "Updated todo successfully";

      // Write the updated data back to the file
      fs.writeFile(todos, JSON.stringify(todo_data, null, 2), 'utf-8', (err) => {
        if (err) {
          console.error('Error writing file:', err);
          return res.status(500).json({ message: 'Server error' });
        }
        res.status(200).json(todo_data);
      });
    } else {
      // Return 404 if the item is not found
      res.status(404).json({ message: `Todo with id ${id} not found` });
    }
  });
});

app.delete('/todos/:id', (req,res)=> {
  let id = parseInt(req.params.id);
  fs.readFile(todos, 'utf-8', (err, data)=> {
    let todo_data = JSON.parse(data); //converted to json obj
    let todoIndex = findIndex(todo_data, id);
    // splice specify from this index REMOVE  these number of items and keep on adding these items
    todo_data.splice(todoIndex, 1); //splice(from_this_index, no_of_items, item1, item2, ....)   
    fs.writeFile(todos, JSON.stringify(todo_data), (err)=> {
      if (err) throw err;
      res.status(200).json(todo_data)
    });
  });
});
app.listen(3000)
module.exports = app;